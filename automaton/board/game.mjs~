
import Brain from "./brain/brain.mjs";
import {BrainBoard} from "./board/brainshell.mjs"

import * as switcher from "./switcher.mjs";
import * as testPanel from "./testPanel.mjs";
import * as analyzer from "./analyzer.mjs";

const journal = [ 
	{ HTML : `
		<SPAN ID="pageNum" style="float:right;margin-right:10">1</SPAN>
		<BR>
        	<CENTER>Observations<BR>
                on<BR>Certain Properties<BR>
                of<BR>
                Components<BR>
                of<BR>
                Synthetic Brains<BR>
                <BR><BR><BR>
                [Nav instructuions to next page]<BR>
                [nav instructions to exit]<BR>
          ` }
        ,{ HTML : `
		<SPAN ID="pageNum" style="float:right;margin-right:10">1</SPAN>
		<BR>
        	I have returned to the lab to continue<BR>
                my experiments on the brain components<BR>
                <BR>
                They are constructing a bug in the<BR>
                workshop.  Once it is completed I will be<BR>
                able to use my knowledge of synthetic<br>
                brains to control it.<BR>
                <BR>
                I plan to do a series of experiemnts.<BR>
                Each will involve creating a brain to<BR>
                perform a specific function.  The brains<BR>
                will be built on the brain board<BR>
                <BR>
                [Nav instructuions to previous page]<BR>
                [nav instructions to exit]
        `}
        ,{ HTML : `
		<SPAN ID="pageNum" style="float:right;margin-right:10">1</SPAN>
		<BR>
        	Monitoring Equpment<BR>
                <BR>
                The brain will be used to control lights in<BR>
                response to inputs from switches.<BR>
                <BR>
                THe input from the switches and the<BR>
                output to the lights will be monitored by<BR>
                a Logic Analyzer.  It shows the level of the<BR>
                output in blue.<BR>
                <BR>
                It can be preprogrammed with the<BR>
                expected output (shown in gold during<BR>
                a test) and will signal if the actal output<BR>
                is wrong.<BR>
         `
          , activate : ()=>{
          	//showAnalyzer();
                // add input
                // add output
          }
         }
	

        ,{ HTML : `
		<SPAN ID="pageNum" style="float:right;margin-right:10">1</SPAN>
		<BR>
        	The logic analyzer and siwtches are run<BR>
                by control boxes on the shelf [above].<BR>
                <BR>
                Flip the switch to "Run" to start things<BR>
                running.<BR>
                <BR>
                Press the "Reset" Button to clear the<BR>
                screen and return things to their original<BR>
                position.<BR>
                <BR>
                TO test a brain, press the "Test" Button<BR>
                then flip the switch to "Run".  If the<BR>
                brain has done what it should when the<BR>
                timer reaches zero, the experiment is a<BR>
                success.<BR>
         `}
        ,{ HTML : `
		<SPAN ID="pageNum" style="float:right;margin-right:10">1</SPAN>
		<BR>
        	Signals and Lines<BR>
                I have discovered that bug brains<BR>
                operate on signals which range from<BR>
                0(off) to 100(on).<BR>
                <BR>
                The signals enter the brain through the<BR>
                input nodes, travel along lines and exit<BR>
                through output nodes.<BR>
                <BR>
                Input Node - Line - Output Node(IMAGE)<BR>
                <IMG> </IMG><BR>
                A line is made by grabbing the edge of a<BR>
                node and dragging it out.  Drop the line<BR>
                on the center of the target node.<BR>
                
         `}
        ,{ HTML : `
		<SPAN ID="pageNum" style="float:right;margin-right:10">6</SPAN>
		<BR>
        	Experiment 1: The Start<BR>
                I have connected the input node to an<BR>
                automatic switch.  The output node<BR>
                goes to the light.  To confirm my theory<BR>
                on the previous page, I will attempt to<BR>
                make a brain where the light will com<BR>
                on when the switch is on.<BR>
                <BR>
                <IMG></IMG>Input from switch<BR>
                <IMG></IMG>Output to light<BR>
                <BR>
                [Build a brain on the Brain Board]<BR>
                [To test, press Test and switch to Run]<BR>
                [Go to the next page when successful]<BR>
         `
         , locked : true
         }
        ,{ HTML : `
		<SPAN ID="pageNum" style="float:right;margin-right:10">6</SPAN>
		<BR>
		A Success!!!!!<BR>
		<BR>
		They have started work on the bug in the<BR>
		workshop.  I had beter hurry up and<BR>
		complete these experiments.<BR>
		<BR>
		There seems to be a space for connecting<BR>
		up to 8 lines to the input node.  In<BR>
		theory then I should be able to drive<BR>
		more than one light from the same input.<BR>
		I'll have to test this.<BR>
		<BR>
		<BR>
		<BR>
		<BR>
         `}
        ,{ HTML : `
		<SPAN ID="pageNum" style="float:right;margin-right:10">6</SPAN>
		<BR>
		Experiment 2: Two Lights<BR>
		I have connected the input node to an<BR>
		automatic switch.  There are two output<BR>
		nodes - each goes to a light.  I will<BR>
		attempt to make a brain where both<BR>
		lights come on when the switch is on.<BR>
		<BR>
		<BR>
		<IMG></IMG> Input from swtich<BR>
		<IMG></IMG> Output to lights 1 and 2<BR>
         `
	 , locked:true
	}
        ,{ HTML : `
		<SPAN ID="pageNum" style="float:right;margin-right:10">6</SPAN>
		<BR>
		Two in a row!!<BR>
		<BR>
		Much excitement.  Having a party<BR>
		to celebrate.  Maybe I could set<BR>
		up some lights???<BR>
		<BR>
		Might as well do it as an<BR>
		experiment...<BR>
		<BR>
		<BR>
		<BR>
		<BR>
		<BR>
         `}
        ,{ HTML : `
		<SPAN ID="pageNum" style="float:right;margin-right:10">6</SPAN>
		<BR>
		Experiment 3: Disco<BR>
		I have set up a second faster automatic<BR>
		switch and there are now four lights.<BR>
		I want lights 1 and 3 to swtich slowly<BR>
		and lights 2 and 4 to switch quickly.<BR>
		<BR>
		<IMG></IMG> Input from 1 and 2<BR>
		<IMG></IMG> output to lights 1,2,3 and 4.<BR>
		[Lines can be removed by grabbing<BR>
		them in one of the 8 grid squares<BR>
		that surround the node then dragging<BR>
		them away and dropping them]<BR>
         `
	 , locked:true
	}
        ,{ HTML : `
         `}
        ,{ HTML : `
         `}
        ,{ HTML : `
         `}
        
        ];
        
var gameState = {
	journalState : 0,
	progressLocked : false,
}


var boardFrame = document.getElementById( "boardFrame" );
var brain = Brain();
var brainBoard = new BrainBoard( brain, boardFrame );

var notebookPanel = document.getElementById( "notebookPanel" );
notebookPanel.addEventListener( "click", (evt)=>{
		if( evt.offsetX > 100 )
			setPage( gameState.journalState+1 );
		else if( gameState.journalState )
			setPage( gameState.journalState-1 );
	} );
notebookPanel.innerHTML = journal[gameState.journalState].HTML;

var activators = [];

function testSwitch() {
	var newDiv = document.createElement( "div" );
        newDiv.style.display = "inline-block";
        var tmp;
	newDiv.appendChild( tmp = switcher.animator(0.75) );
        activators.push( tmp );
	newDiv.appendChild( tmp = switcher.animator(0.223) );
        activators.push( tmp );
	document.body.appendChild( newDiv );
}

function testTestPanel() {
	var newDiv = document.createElement( "div" );
        newDiv.style.display = "inline-block";
	newDiv.appendChild( testPanel.speaker() );
        newDiv.appendChild( testPanel.testButton() );
        newDiv.appendChild( testPanel.runStop() );
        newDiv.appendChild( analyzer.makeAnalyzer( (n)=>{
        	if( n > 4 ) {
                	return 0;
                }
                else {
                	if( n < activators.length ) 
                        	return activators[n].getValue() * 100;
                        return 0;
                }
        }) );
	//newDiv.appendChild( switcher.animator(4) );
	document.body.appendChild( newDiv );
}

testTestPanel();
testSwitch();

function setPage( newPage )
{
	if( gameState.progressLocked ) {
		if( newPage > gameState.journalState ) {
		 	return;
		}
	}
	gameState.journalState = newPage;

	gameState.progressLocked = journal[gameState.journalState].locked || false;

	notebookPanel.innerHTML = journal[gameState.journalState].HTML;
	var pageNum = notebookPanel.querySelector(`[id="pageNum"]`)
	if( pageNum )
		pageNum.textContent = '' + (gameState.journalState + 1);
	
}



        